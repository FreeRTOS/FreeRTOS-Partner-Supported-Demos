-------------------------------------------------------------------------------
-- Module      = U2A_startup_PE0.850
-- Version     = E1.0.0g
-------------------------------------------------------------------------------
--                                  COPYRIGHT
-------------------------------------------------------------------------------
-- Copyright (c) 2021 by Renesas Electronics Europe GmbH,
--               a company of the Renesas Electronics Corporation
-------------------------------------------------------------------------------
-- Purpose:      Startup Code
--
-------------------------------------------------------------------------------
--
-- Warranty Disclaimer
--
-- Because the Product(s) is licensed free of charge, there is no warranty
-- of any kind whatsoever and expressly disclaimed and excluded by Renesas,
-- either expressed or implied, including but not limited to those for
-- non-infringement of intellectual property, merchantability and/or
-- fitness for the particular purpose.
-- Renesas shall not have any obligation to maintain, service or provide bug
-- fixes for the supplied Product(s) and/or the Application.
--
-- Each User is solely responsible for determining the appropriateness of
-- using the Product(s) and assumes all risks associated with its exercise
-- of rights under this Agreement, including, but not limited to the risks
-- and costs of program errors, compliance with applicable laws, damage to
-- or loss of data, programs or equipment, and unavailability or
-- interruption of operations.
--
-- Limitation of Liability
--
-- In no event shall Renesas be liable to the User for any incidental,
-- consequential, indirect, or punitive damage (including but not limited
-- to lost profits) regardless of whether such liability is based on breach
-- of contract, tort, strict liability, breach of warranties, failure of
-- essential purpose or otherwise and even if advised of the possibility of
-- such damages. Renesas shall not be liable for any services or products
-- provided by third party vendors, developers or consultants identified or
-- referred to the User by Renesas in connection with the Product(s) and/or
-- the Application.
--
-------------------------------------------------------------------------------
-- Environment:
--              Device:         U2A
--              IDE:            GHS Multi V7.1.4 or later
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- Revision Control History:
-- E1.0.0g :   24th-Aug-2021    : Initial Version
-------------------------------------------------------------------------------

  .set    CUx_EBV, 0x00078000
  .text

-------------------------------------------------------------------------------
------------- This ghs liability is used for sync between other core
-------------------------------------------------------------------------------
  .global ___ghs_board_devices_init
___ghs_board_devices_init:
  -- .mev_address section in cRAM_0 is used for Sync flags
  mov     ___ghsbegin_mev_address, r20
  st.w    r0, 0[r20]
  jmp     [lp]

-------------------------------------------------------------------------------
-------------  PE0 Specific Startup Routine
-------------------------------------------------------------------------------
  .global _RESET_PE0
_RESET_PE0:

  -- FPU system register
  mov     0x00010020, r10 -- set 1 in PSW.CU0  for writing FPU Function Register
                          -- set 1 in PSW.ID for prohibiting EI-level interrupt
  ldsr    r10, 5, 0       -- SR5,0  PSW

  mov     0x00220000, r10 -- set 1 in FPSR.FS
  ldsr    r10, 6, 0       -- SR6,0  FPSR
  ldsr    r0,  7, 0       -- SR7,0  FPEPC
  ldsr    r0,  8, 0       -- SR8,0  FPST
  ldsr    r0,  9, 0       -- SR9,0  FPCC

-------------  Memory Initialization
  -- Initialize Cluster Ram
  jarl  _Init_CRAM0, lp

  -- Initialize Local Ram 0
  jarl  _Init_LRAM0, lp

  -- Initialize Self Ram
  jarl  _Init_RAMS, lp

#if defined (PE1_USED)
  -- Initialize Local Ram 1
  jarl  _Init_LRAM1, lp
#endif

-------------  PE0 Initialization
  -- Initialization of the global pointer
  mov   ___ghsbegin_sdabase, gp

  -- Initialization of the text pointer
  mov   __tp, r5

  -- Initialization of the stack pointer
  mov   ___ghsend_stack, sp

  -- First set EBASE register address
  mov   ___ghsbegin_intvect_PE0, r10
  mov   0x0000003, r11 -- DV bit
  or    r11, r10
  ldsr  r10, EBASE, 1

  -- then set 1 to PSW.EBV -> RBASE!=EBASE
  -- then set 1 to PSW.CU0 and CU1
  stsr  PSW, r10, 0
  mov   CUx_EBV, r11
  or    r11, r10
  ldsr  r10, PSW, 0

  -- Jump to the initialisation functions of the library
  -- and from there to main()
  jr __start
-------------------------------------------------------------------------------
-------------  Init CRAM
-------------------------------------------------------------------------------
_Init_CRAM0:
  mov          0xAAAAAAAA, r6
  mov    ___ghs_cram0start, r7
  mov      ___ghs_cram0end, r8

_cram_loop:
  cmp                  r7, r8
  bne   2f
  1: jmp   [lp]
  2: st.w              r6, 0[r7]
     add                4, r7
     br               _cram_loop

-------------------------------------------------------------------------------
-------------  Init LRAM 0
-------------------------------------------------------------------------------
_Init_LRAM0:
  mov         0xAAAAAAAA, r6
  mov    ___ghs_ramstart, r7
  mov      ___ghs_ramend, r8

_ram_loop:
  cmp                 r7, r8
  bne   2f
  1: jmp   [lp]
  2: st.w             r6, 0[r7]
     add               4, r7
     br               _ram_loop

_Init_RAMS:
  mov         0xAAAAAAAA, r6
  mov    ___ghs_ramsstart, r7
  mov      ___ghs_ramsend, r8

_rams_loop:
  cmp                 r7, r8
  bne   2f
  1: jmp   [lp]
  2: st.w             r6, 0[r7]
     add               4, r7
     br               _rams_loop

-------------------------------------------------------------------------------
-------------  Init LRAM 1
#if defined (PE1_USED)
-------------------------------------------------------------------------------
_Init_LRAM1:
  mov         0xAAAAAAAA, r6
  mov   ___ghs_ram1start, r7
  mov     ___ghs_ram1end, r8

_ram_loop1:
  cmp                 r7, r8
  bne   2f
  1: jmp   [lp]
  2: st.w             r6, 0[r7]
     add               4, r7
     br               _ram_loop1
#endif

-------------------------------------------------------------------------------
-------------  Interrupt service routine of unused interrupts
-------------------------------------------------------------------------------
  .global  __unused_isr
__unused_isr:
  br    __unused_isr

-------------------------------------------------------------------------------
-------------  Start Section for exception table
.section".intvect_PE0",.text
-------------------------------------------------------------------------------
__ex_entry_PE0:

#if defined (PE0_USED)
----RESET
    .offset 0x0000
    .extern _RESET
    jr _RESET

----SYSERR
    .offset 0x0010
    .extern _SYSERR_PE0
    jr __unused_isr

----FETRAP
    .offset 0x0030
    .extern _FETRAP_PE0
    jr __unused_isr

----TRAP0
    .offset 0x0040
    .extern _vTRAP0_Handler
    jr _vTRAP0_Handler

----TRAP1
    .offset 0x0050
    .extern _EITRAP1_PE0
    jr __unused_isr

----RIEX
    .offset 0x0060
    .extern _RIEX_PE0
    jr __unused_isr

----UCPOP
    .offset 0x0080
    .extern _UCPOP_PE0
    jr __unused_isr

----MIP_MDP
    .offset 0x0090
    .extern _MIP_MDP_PE0
    jr __unused_isr

----PIE
    .offset 0x00a0
    .extern _PIE_PE0
    jr __unused_isr

----MAE_MAEX
    .offset 0x00c0
    .extern _MAE_MAEX_PE0
    jr __unused_isr

----FENMI
    .offset 0x00e0
    .extern _FENMI_PE0
    jr __unused_isr

----FEINT
    .offset 0x00f0
    --.extern _FEINT_PE0
    jr __unused_isr

----EIINTn priority_0
    .offset 0x0100
    .extern _vIrq_Handler
    jr _vIrq_Handler

#endif
-------------  End of exception table
